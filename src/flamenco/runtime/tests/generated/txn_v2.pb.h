/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_FD_V2_TXN_V2_PB_H_INCLUDED
#define PB_FD_V2_TXN_V2_PB_H_INCLUDED

#include "instr_v2.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* Message header information. */
typedef struct fd_v2_txn_header {
    uint32_t num_required_signatures;
    uint32_t num_readonly_signed_accounts;
    uint32_t num_readonly_unsigned_accounts;
} fd_v2_txn_header_t;

/* Address Lookup table related metadata. This is used to parse the data from 
the lookup table accounts. from the account list. */
typedef struct fd_v2_lut_entry {
    pb_callback_t account_key;
    pb_callback_t writable_indexes;
    pb_callback_t readonly_indexes;
} fd_v2_lut_entry_t;

/* As a note, if the scope of the fuzzer is just an instruction, then all of
the fields in TxnEnv will be set to null except for account_keys and 
InstrEnv. */
typedef struct fd_v2_txn_env {
    /* Transaction header. */
    bool has_header;
    fd_v2_txn_header_t header;
    /* Determines if the transaction is legacy or not. */
    bool is_legacy;
    pb_callback_t account_keys;
    /* Instruction(s) that the transaction executes. */
    pb_callback_t instructions;
    /* Recent blockhash provided in the message. */
    pb_callback_t recent_blockhash;
    /* Address table lookups that aren't availble in legacy messages. */
    pb_callback_t alut_entires;
    /* The message hash. */
    pb_callback_t message_hash;
    /* The signatures needed in the transaction. */
    pb_callback_t signatures;
} fd_v2_txn_env_t;

typedef struct fd_v2_txn_effects {
    /* Transaction level error code. */
    bool txn_error;
    /* Resulting account states from each instruction execution. */
    pb_callback_t instr_effects;
    /* Return data from the instruction */
    pb_callback_t return_data;
    /* Consumed compute units by the instruction. This value will be used
by fuzzers that operate at the transaction granularity. */
    uint64_t cus_remain;
    /* Details about the fee. */
    uint64_t transaction_fee;
    uint64_t prioritization_fee;
} fd_v2_txn_effects_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define FD_V2_TXN_HEADER_INIT_DEFAULT            {0, 0, 0}
#define FD_V2_LUT_ENTRY_INIT_DEFAULT             {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define FD_V2_TXN_ENV_INIT_DEFAULT               {false, FD_V2_TXN_HEADER_INIT_DEFAULT, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define FD_V2_TXN_EFFECTS_INIT_DEFAULT           {0, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0}
#define FD_V2_TXN_HEADER_INIT_ZERO               {0, 0, 0}
#define FD_V2_LUT_ENTRY_INIT_ZERO                {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define FD_V2_TXN_ENV_INIT_ZERO                  {false, FD_V2_TXN_HEADER_INIT_ZERO, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define FD_V2_TXN_EFFECTS_INIT_ZERO              {0, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define FD_V2_TXN_HEADER_NUM_REQUIRED_SIGNATURES_TAG 1
#define FD_V2_TXN_HEADER_NUM_READONLY_SIGNED_ACCOUNTS_TAG 2
#define FD_V2_TXN_HEADER_NUM_READONLY_UNSIGNED_ACCOUNTS_TAG 3
#define FD_V2_LUT_ENTRY_ACCOUNT_KEY_TAG          1
#define FD_V2_LUT_ENTRY_WRITABLE_INDEXES_TAG     2
#define FD_V2_LUT_ENTRY_READONLY_INDEXES_TAG     3
#define FD_V2_TXN_ENV_HEADER_TAG                 1
#define FD_V2_TXN_ENV_IS_LEGACY_TAG              2
#define FD_V2_TXN_ENV_ACCOUNT_KEYS_TAG           3
#define FD_V2_TXN_ENV_INSTRUCTIONS_TAG           4
#define FD_V2_TXN_ENV_RECENT_BLOCKHASH_TAG       5
#define FD_V2_TXN_ENV_ALUT_ENTIRES_TAG           6
#define FD_V2_TXN_ENV_MESSAGE_HASH_TAG           7
#define FD_V2_TXN_ENV_SIGNATURES_TAG             8
#define FD_V2_TXN_EFFECTS_TXN_ERROR_TAG          1
#define FD_V2_TXN_EFFECTS_INSTR_EFFECTS_TAG      2
#define FD_V2_TXN_EFFECTS_RETURN_DATA_TAG        3
#define FD_V2_TXN_EFFECTS_CUS_REMAIN_TAG         4
#define FD_V2_TXN_EFFECTS_TRANSACTION_FEE_TAG    5
#define FD_V2_TXN_EFFECTS_PRIORITIZATION_FEE_TAG 6

/* Struct field encoding specification for nanopb */
#define FD_V2_TXN_HEADER_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   num_required_signatures,   1) \
X(a, STATIC,   SINGULAR, UINT32,   num_readonly_signed_accounts,   2) \
X(a, STATIC,   SINGULAR, UINT32,   num_readonly_unsigned_accounts,   3)
#define FD_V2_TXN_HEADER_CALLBACK NULL
#define FD_V2_TXN_HEADER_DEFAULT NULL

#define FD_V2_LUT_ENTRY_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    account_key,       1) \
X(a, CALLBACK, REPEATED, UINT32,   writable_indexes,   2) \
X(a, CALLBACK, REPEATED, UINT32,   readonly_indexes,   3)
#define FD_V2_LUT_ENTRY_CALLBACK pb_default_field_callback
#define FD_V2_LUT_ENTRY_DEFAULT NULL

#define FD_V2_TXN_ENV_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  header,            1) \
X(a, STATIC,   SINGULAR, BOOL,     is_legacy,         2) \
X(a, CALLBACK, REPEATED, BYTES,    account_keys,      3) \
X(a, CALLBACK, REPEATED, MESSAGE,  instructions,      4) \
X(a, CALLBACK, SINGULAR, BYTES,    recent_blockhash,   5) \
X(a, CALLBACK, REPEATED, MESSAGE,  alut_entires,      6) \
X(a, CALLBACK, SINGULAR, BYTES,    message_hash,      7) \
X(a, CALLBACK, REPEATED, BYTES,    signatures,        8)
#define FD_V2_TXN_ENV_CALLBACK pb_default_field_callback
#define FD_V2_TXN_ENV_DEFAULT NULL
#define fd_v2_txn_env_t_header_MSGTYPE fd_v2_txn_header_t
#define fd_v2_txn_env_t_instructions_MSGTYPE fd_v2_instr_env_t
#define fd_v2_txn_env_t_alut_entires_MSGTYPE fd_v2_lut_entry_t

#define FD_V2_TXN_EFFECTS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     txn_error,         1) \
X(a, CALLBACK, REPEATED, MESSAGE,  instr_effects,     2) \
X(a, CALLBACK, SINGULAR, BYTES,    return_data,       3) \
X(a, STATIC,   SINGULAR, UINT64,   cus_remain,        4) \
X(a, STATIC,   SINGULAR, UINT64,   transaction_fee,   5) \
X(a, STATIC,   SINGULAR, UINT64,   prioritization_fee,   6)
#define FD_V2_TXN_EFFECTS_CALLBACK pb_default_field_callback
#define FD_V2_TXN_EFFECTS_DEFAULT NULL
#define fd_v2_txn_effects_t_instr_effects_MSGTYPE fd_v2_instr_effects_t

extern const pb_msgdesc_t fd_v2_txn_header_t_msg;
extern const pb_msgdesc_t fd_v2_lut_entry_t_msg;
extern const pb_msgdesc_t fd_v2_txn_env_t_msg;
extern const pb_msgdesc_t fd_v2_txn_effects_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define FD_V2_TXN_HEADER_FIELDS &fd_v2_txn_header_t_msg
#define FD_V2_LUT_ENTRY_FIELDS &fd_v2_lut_entry_t_msg
#define FD_V2_TXN_ENV_FIELDS &fd_v2_txn_env_t_msg
#define FD_V2_TXN_EFFECTS_FIELDS &fd_v2_txn_effects_t_msg

/* Maximum encoded size of messages (where known) */
/* fd_v2_LUTEntry_size depends on runtime parameters */
/* fd_v2_TxnEnv_size depends on runtime parameters */
/* fd_v2_TxnEffects_size depends on runtime parameters */
#define FD_V2_TXN_HEADER_SIZE                    18
#define FD_V2_TXN_V2_PB_H_MAX_SIZE               FD_V2_TXN_HEADER_SIZE

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
