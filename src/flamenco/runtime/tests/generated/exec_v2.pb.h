/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_FD_V2_EXEC_V2_PB_H_INCLUDED
#define PB_FD_V2_EXEC_V2_PB_H_INCLUDED

#include "slot_v2.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum fd_v2_harness_type {
    FD_V2_HARNESS_TYPE_INSTR = 0,
    FD_V2_HARNESS_TYPE_TXN = 1,
    FD_V2_HARNESS_TYPE_SLOT = 2,
    FD_V2_HARNESS_TYPE_RUNTIME = 3
} fd_v2_harness_type_t;

/* Struct definitions */
typedef struct fd_v2_seed_address {
    /* The seed address base. (32 bytes) */
    pb_byte_t base[32];
    /* The seed path. (<= 32 bytes) */
    pb_byte_t seed[32];
    /* The seed address owner. (32 bytes) */
    pb_byte_t owner[32];
} fd_v2_seed_address_t;

typedef struct fd_v2_acct_state {
    /* The account address. (32 bytes) */
    pb_byte_t address[32];
    /* Starting lamport balance. */
    uint64_t lamports;
    /* Account data is limited to 10 MiB. */
    pb_bytes_array_t *data;
    /* Is an account executable */
    bool executable;
    /* All new accounts have a rent_epoch of ULONG_MAX. If omitted, 
implies a value of ULONG_MAX. */
    uint64_t rent_epoch;
    /* Address of the program that owns this account. (32 bytes) */
    pb_byte_t owner[32];
    /* Seed address used by the fuzzing engine. */
    bool has_seed_addr;
    fd_v2_seed_address_t seed_addr;
} fd_v2_acct_state_t;

typedef struct fd_v2_feature {
    pb_byte_t feature_id[32]; /* Feature pubkey */
    uint64_t slot; /* Slot at which feature is activated */
} fd_v2_feature_t;

typedef struct fd_v2_leader_schedule {
    uint64_t epoch; /* Epoch number. */
    pb_bytes_array_t *pubkey; /* Leader pubkey. */
    pb_size_t idxs_count;
    uint32_t *idxs; /* Indexes into the leader. */
} fd_v2_leader_schedule_t;

typedef struct fd_v2_rent_schedule {
    /* Rent schedule for the current epoch. */
    uint64_t epoch;
    /* Vector of pubkeys for each slot that rent should be collected from. */
    pb_callback_t partitions;
    /* Rent calculation parameters. */
    uint64_t slots_per_year;
} fd_v2_rent_schedule_t;

typedef struct fd_v2_status_cache {
    /* Vector of transaction hashes that exist in the status cache.
TODO: fill in the rest of the status cache. */
    pb_callback_t tx_hashes;
} fd_v2_status_cache_t;

typedef struct fd_v2_exec_env {
    fd_v2_harness_type_t harness_type;
    /* Starting account states before harness execution. */
    pb_size_t acct_states_count;
    struct fd_v2_acct_state *acct_states;
    /* Feature set for the execution. */
    pb_size_t features_count;
    struct fd_v2_feature *features;
    /* Leader schedule for the first epoch. This value is recomputed at the
epoch boundary. */
    bool has_leader_schedule;
    fd_v2_leader_schedule_t leader_schedule;
    /* Slot envs to execute. */
    pb_size_t slots_count;
    struct fd_v2_slot_env *slots;
    /* Status cache of recent transactions. */
    bool has_status_cache;
    fd_v2_status_cache_t status_cache;
    /* 301 most recent blockhashes. */
    pb_callback_t block_hash_queue;
} fd_v2_exec_env_t;

typedef struct fd_v2_exec_effects {
    fd_v2_harness_type_t harness_type;
    /* Slot effects. */
    pb_size_t slot_effects_count;
    struct fd_v2_slot_effects *slot_effects;
    /* Resulting account states at the end of execution. */
    pb_size_t acct_states_count;
    struct fd_v2_acct_state *acct_states;
} fd_v2_exec_effects_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _FD_V2_HARNESS_TYPE_MIN FD_V2_HARNESS_TYPE_INSTR
#define _FD_V2_HARNESS_TYPE_MAX FD_V2_HARNESS_TYPE_RUNTIME
#define _FD_V2_HARNESS_TYPE_ARRAYSIZE ((fd_v2_harness_type_t)(FD_V2_HARNESS_TYPE_RUNTIME+1))







#define fd_v2_exec_env_t_harness_type_ENUMTYPE fd_v2_harness_type_t

#define fd_v2_exec_effects_t_harness_type_ENUMTYPE fd_v2_harness_type_t


/* Initializer values for message structs */
#define FD_V2_SEED_ADDRESS_INIT_DEFAULT          {{0}, {0}, {0}}
#define FD_V2_ACCT_STATE_INIT_DEFAULT            {{0}, 0, NULL, 0, 0, {0}, false, FD_V2_SEED_ADDRESS_INIT_DEFAULT}
#define FD_V2_FEATURE_INIT_DEFAULT               {{0}, 0}
#define FD_V2_LEADER_SCHEDULE_INIT_DEFAULT       {0, NULL, 0, NULL}
#define FD_V2_RENT_SCHEDULE_INIT_DEFAULT         {0, {{NULL}, NULL}, 0}
#define FD_V2_STATUS_CACHE_INIT_DEFAULT          {{{NULL}, NULL}}
#define FD_V2_EXEC_ENV_INIT_DEFAULT              {_FD_V2_HARNESS_TYPE_MIN, 0, NULL, 0, NULL, false, FD_V2_LEADER_SCHEDULE_INIT_DEFAULT, 0, NULL, false, FD_V2_STATUS_CACHE_INIT_DEFAULT, {{NULL}, NULL}}
#define FD_V2_EXEC_EFFECTS_INIT_DEFAULT          {_FD_V2_HARNESS_TYPE_MIN, 0, NULL, 0, NULL}
#define FD_V2_SEED_ADDRESS_INIT_ZERO             {{0}, {0}, {0}}
#define FD_V2_ACCT_STATE_INIT_ZERO               {{0}, 0, NULL, 0, 0, {0}, false, FD_V2_SEED_ADDRESS_INIT_ZERO}
#define FD_V2_FEATURE_INIT_ZERO                  {{0}, 0}
#define FD_V2_LEADER_SCHEDULE_INIT_ZERO          {0, NULL, 0, NULL}
#define FD_V2_RENT_SCHEDULE_INIT_ZERO            {0, {{NULL}, NULL}, 0}
#define FD_V2_STATUS_CACHE_INIT_ZERO             {{{NULL}, NULL}}
#define FD_V2_EXEC_ENV_INIT_ZERO                 {_FD_V2_HARNESS_TYPE_MIN, 0, NULL, 0, NULL, false, FD_V2_LEADER_SCHEDULE_INIT_ZERO, 0, NULL, false, FD_V2_STATUS_CACHE_INIT_ZERO, {{NULL}, NULL}}
#define FD_V2_EXEC_EFFECTS_INIT_ZERO             {_FD_V2_HARNESS_TYPE_MIN, 0, NULL, 0, NULL}

/* Field tags (for use in manual encoding/decoding) */
#define FD_V2_SEED_ADDRESS_BASE_TAG              1
#define FD_V2_SEED_ADDRESS_SEED_TAG              2
#define FD_V2_SEED_ADDRESS_OWNER_TAG             3
#define FD_V2_ACCT_STATE_ADDRESS_TAG             1
#define FD_V2_ACCT_STATE_LAMPORTS_TAG            2
#define FD_V2_ACCT_STATE_DATA_TAG                3
#define FD_V2_ACCT_STATE_EXECUTABLE_TAG          4
#define FD_V2_ACCT_STATE_RENT_EPOCH_TAG          5
#define FD_V2_ACCT_STATE_OWNER_TAG               6
#define FD_V2_ACCT_STATE_SEED_ADDR_TAG           7
#define FD_V2_FEATURE_FEATURE_ID_TAG             1
#define FD_V2_FEATURE_SLOT_TAG                   2
#define FD_V2_LEADER_SCHEDULE_EPOCH_TAG          1
#define FD_V2_LEADER_SCHEDULE_PUBKEY_TAG         2
#define FD_V2_LEADER_SCHEDULE_IDXS_TAG           3
#define FD_V2_RENT_SCHEDULE_EPOCH_TAG            1
#define FD_V2_RENT_SCHEDULE_PARTITIONS_TAG       2
#define FD_V2_RENT_SCHEDULE_SLOTS_PER_YEAR_TAG   3
#define FD_V2_STATUS_CACHE_TX_HASHES_TAG         1
#define FD_V2_EXEC_ENV_HARNESS_TYPE_TAG          1
#define FD_V2_EXEC_ENV_ACCT_STATES_TAG           2
#define FD_V2_EXEC_ENV_FEATURES_TAG              3
#define FD_V2_EXEC_ENV_LEADER_SCHEDULE_TAG       4
#define FD_V2_EXEC_ENV_SLOTS_TAG                 5
#define FD_V2_EXEC_ENV_STATUS_CACHE_TAG          6
#define FD_V2_EXEC_ENV_BLOCK_HASH_QUEUE_TAG      7
#define FD_V2_EXEC_EFFECTS_HARNESS_TYPE_TAG      1
#define FD_V2_EXEC_EFFECTS_SLOT_EFFECTS_TAG      2
#define FD_V2_EXEC_EFFECTS_ACCT_STATES_TAG       3

/* Struct field encoding specification for nanopb */
#define FD_V2_SEED_ADDRESS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, base,              1) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, seed,              2) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, owner,             3)
#define FD_V2_SEED_ADDRESS_CALLBACK NULL
#define FD_V2_SEED_ADDRESS_DEFAULT NULL

#define FD_V2_ACCT_STATE_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, address,           1) \
X(a, STATIC,   SINGULAR, UINT64,   lamports,          2) \
X(a, POINTER,  SINGULAR, BYTES,    data,              3) \
X(a, STATIC,   SINGULAR, BOOL,     executable,        4) \
X(a, STATIC,   SINGULAR, UINT64,   rent_epoch,        5) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, owner,             6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  seed_addr,         7)
#define FD_V2_ACCT_STATE_CALLBACK NULL
#define FD_V2_ACCT_STATE_DEFAULT NULL
#define fd_v2_acct_state_t_seed_addr_MSGTYPE fd_v2_seed_address_t

#define FD_V2_FEATURE_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, feature_id,        1) \
X(a, STATIC,   SINGULAR, UINT64,   slot,              2)
#define FD_V2_FEATURE_CALLBACK NULL
#define FD_V2_FEATURE_DEFAULT NULL

#define FD_V2_LEADER_SCHEDULE_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   epoch,             1) \
X(a, POINTER,  SINGULAR, BYTES,    pubkey,            2) \
X(a, POINTER,  REPEATED, UINT32,   idxs,              3)
#define FD_V2_LEADER_SCHEDULE_CALLBACK NULL
#define FD_V2_LEADER_SCHEDULE_DEFAULT NULL

#define FD_V2_RENT_SCHEDULE_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   epoch,             1) \
X(a, CALLBACK, REPEATED, BYTES,    partitions,        2) \
X(a, STATIC,   SINGULAR, UINT64,   slots_per_year,    3)
#define FD_V2_RENT_SCHEDULE_CALLBACK pb_default_field_callback
#define FD_V2_RENT_SCHEDULE_DEFAULT NULL

#define FD_V2_STATUS_CACHE_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    tx_hashes,         1)
#define FD_V2_STATUS_CACHE_CALLBACK pb_default_field_callback
#define FD_V2_STATUS_CACHE_DEFAULT NULL

#define FD_V2_EXEC_ENV_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    harness_type,      1) \
X(a, POINTER,  REPEATED, MESSAGE,  acct_states,       2) \
X(a, POINTER,  REPEATED, MESSAGE,  features,          3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  leader_schedule,   4) \
X(a, POINTER,  REPEATED, MESSAGE,  slots,             5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  status_cache,      6) \
X(a, CALLBACK, SINGULAR, BYTES,    block_hash_queue,   7)
#define FD_V2_EXEC_ENV_CALLBACK pb_default_field_callback
#define FD_V2_EXEC_ENV_DEFAULT NULL
#define fd_v2_exec_env_t_acct_states_MSGTYPE fd_v2_acct_state_t
#define fd_v2_exec_env_t_features_MSGTYPE fd_v2_feature_t
#define fd_v2_exec_env_t_leader_schedule_MSGTYPE fd_v2_leader_schedule_t
#define fd_v2_exec_env_t_slots_MSGTYPE fd_v2_slot_env_t
#define fd_v2_exec_env_t_status_cache_MSGTYPE fd_v2_status_cache_t

#define FD_V2_EXEC_EFFECTS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    harness_type,      1) \
X(a, POINTER,  REPEATED, MESSAGE,  slot_effects,      2) \
X(a, POINTER,  REPEATED, MESSAGE,  acct_states,       3)
#define FD_V2_EXEC_EFFECTS_CALLBACK NULL
#define FD_V2_EXEC_EFFECTS_DEFAULT NULL
#define fd_v2_exec_effects_t_slot_effects_MSGTYPE fd_v2_slot_effects_t
#define fd_v2_exec_effects_t_acct_states_MSGTYPE fd_v2_acct_state_t

extern const pb_msgdesc_t fd_v2_seed_address_t_msg;
extern const pb_msgdesc_t fd_v2_acct_state_t_msg;
extern const pb_msgdesc_t fd_v2_feature_t_msg;
extern const pb_msgdesc_t fd_v2_leader_schedule_t_msg;
extern const pb_msgdesc_t fd_v2_rent_schedule_t_msg;
extern const pb_msgdesc_t fd_v2_status_cache_t_msg;
extern const pb_msgdesc_t fd_v2_exec_env_t_msg;
extern const pb_msgdesc_t fd_v2_exec_effects_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define FD_V2_SEED_ADDRESS_FIELDS &fd_v2_seed_address_t_msg
#define FD_V2_ACCT_STATE_FIELDS &fd_v2_acct_state_t_msg
#define FD_V2_FEATURE_FIELDS &fd_v2_feature_t_msg
#define FD_V2_LEADER_SCHEDULE_FIELDS &fd_v2_leader_schedule_t_msg
#define FD_V2_RENT_SCHEDULE_FIELDS &fd_v2_rent_schedule_t_msg
#define FD_V2_STATUS_CACHE_FIELDS &fd_v2_status_cache_t_msg
#define FD_V2_EXEC_ENV_FIELDS &fd_v2_exec_env_t_msg
#define FD_V2_EXEC_EFFECTS_FIELDS &fd_v2_exec_effects_t_msg

/* Maximum encoded size of messages (where known) */
/* fd_v2_AcctState_size depends on runtime parameters */
/* fd_v2_LeaderSchedule_size depends on runtime parameters */
/* fd_v2_RentSchedule_size depends on runtime parameters */
/* fd_v2_StatusCache_size depends on runtime parameters */
/* fd_v2_ExecEnv_size depends on runtime parameters */
/* fd_v2_ExecEffects_size depends on runtime parameters */
#define FD_V2_EXEC_V2_PB_H_MAX_SIZE              FD_V2_SEED_ADDRESS_SIZE
#define FD_V2_FEATURE_SIZE                       45
#define FD_V2_SEED_ADDRESS_SIZE                  102

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
